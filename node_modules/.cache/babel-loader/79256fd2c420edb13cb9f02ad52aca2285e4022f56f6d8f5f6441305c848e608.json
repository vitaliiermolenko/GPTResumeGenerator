{"ast":null,"code":"var _jsxFileName = \"E:\\\\family\\\\my\\\\worke\\\\petprj\\\\my-gpt-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"sk-proj-X3iYsXxKA8x5RRAk9tnkT3BlbkFJ6pMn5eFKnfeaDs7BNfvn\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setInputMessage('');\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": apiMessages\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => data.json()).then(data => {\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.message\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message typing\",\n          children: \"ChatGPT is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Type message here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSend(inputMessage),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"S4icjkLIokzBII5Wh84y5l0QgLE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","API_KEY","App","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","inputMessage","setInputMessage","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","choices","className","children","i","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["E:/family/my/worke/petprj/my-gpt-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nconst API_KEY = \"sk-proj-X3iYsXxKA8x5RRAk9tnkT3BlbkFJ6pMn5eFKnfeaDs7BNfvn\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\"\n    }\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    \n    setMessages(newMessages);\n    setInputMessage('');\n    setIsTyping(true);\n\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return { role: role, content: messageObject.message };\n    });\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": apiMessages\n    };\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    })\n    .then((data) => data.json())\n    .then((data) => {\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-container\">\n        <div className=\"message-list\">\n          {messages.map((message, i) => (\n            <div key={i} className={`message ${message.sender}`}>\n              {message.message}\n            </div>\n          ))}\n          {isTyping && <div className=\"message typing\">ChatGPT is typing...</div>}\n        </div>\n        <div className=\"message-input\">\n          <input \n            type=\"text\" \n            value={inputMessage} \n            onChange={(e) => setInputMessage(e.target.value)} \n            placeholder=\"Type message here\" \n          />\n          <button onClick={() => handleSend(inputMessage)}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}